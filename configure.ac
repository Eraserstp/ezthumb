#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
#
# Only two files are truly needed: configure.ac and Makefile.am.
# The config.h.in can be generated by autoheader, plus the extra contents. 
# The m4 directory can be empty if there was "AC_CONFIG_MACRO_DIR([m4])" in 
# configure.ac and "ACLOCAL_AMFLAGS = -I m4 --install" in Makefile.am
#
# Using "autoreconf -i" to generate all files, not "autoconf".
#
# Test plan:
# *) configure --enable-debug-build=yes
#    should be "-g -DDEBUG=3 -O0" in compiling
# *) configure --enable-debug-build=0
#    same to --enable-debug-build=no, "-O4" in compiling
# *) configure --enable-debug-build=6
#    should be "-g -DDEBUG=6 -O0" in compiling
# In MinGW, the installer should be created also:
# *) configure --with-gui=no && make release
#    should build the command line tool ezthumb.exe only, no ezthumb_win.exe
# *) configure --with-gui=gtk2 && make release
#    other options are same, which build both ezthumb.exe and ezthumb_win.exe
# In a clean Debian box
# *) configure --with-gui=yes && make
#    should issue a warning and build a command line version
# *) configure --with-gui=gtk && make release
#    same to above; the release only includes source codes.
# *) _FILE_OFFSET_BITS should be set in 32-bit box and unset in 64 bit box.
# Install gtk2-dev
# *) configure --with-gui=no && make
#    should build a command line only version
# *) configure --with-gui=gtk3 && make
#    should issue a warning but build a gtk2 version instead
# Install gtk3-dev
# *) configure && make
#    should link default gui mode with gtk3
# *) configure --with-gui=gtk2 && make
#    should link gtk2
#    make gnome-install
#    install the icon and binary to gnome environment
#    make gnome-uninstall
#    revoke the install operation

AC_PREREQ([2.68])
AC_INIT([ezthumb], [3.5.1], [xuming@users.sourceforge.net])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([main.c])
AC_CONFIG_HEADERS([config.h])
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET

AC_ARG_ENABLE([debug-build],
  AS_HELP_STRING([--enable-debug-build], 
      [Enable the debug output (yes,no,0-7)]))
AS_CASE([$enable_debug_build],
  [yes|Yes|YES], [DEBUGS="-Wall -Wextra -g -DDEBUG=3 -O0"],
  [1|2|3|4|5|6|7], [DEBUGS="-Wall -Wextra -g -DDEBUG=$enable_debug_build -O0"],
  [DEBUGS="-Wall -Wextra -O4"])

AC_ARG_WITH([gui], 
  AS_HELP_STRING([--with-gui], 
      [Build with the Graphic User Interface [yes] (no|gtk|gtk2|gtk3)]))

case "$host_os" in
  cygwin | mingw*)
    SYSTOOL=mingw
    AS_CASE([$with_gui], [no|No|NO], [SYSGUI=CFG_GUI_OFF], [SYSGUI=CFG_GUI_ON])
    # Checks for WIN32 programs.
    AC_CHECK_PROG([WINDRES], [windres], [windres], [])
    AC_CHECK_PROG([NSIS], [makensis], [makensis], [])
    CPPFLAGS="$CPPFLAGS -I./libmingw/include -I./libmingw/include/iup \
	    -I./libmingw/ffmpeg/include"
    LDFLAGS="$LDFLAGS -L./libmingw/lib -L./libmingw/ffmpeg/lib"
    LIBCON="-liconv -mconsole"
    LIBGUI="-liconv -mwindows -lkernel32 -luser32 -lgdi32 -lwinspool \
	    -lcomdlg32 -ladvapi32 -lshell32 -lole32 -loleaut32 -luuid \
	    -lcomctl32"
    CFLAGS="-mms-bitfields"
    SYSDEFS="-DUNICODE -D_UNICODE -D_WIN32_IE=0x0500 -DWINVER=0x500 -DNONDLL"
    ;;
  *)
    SYSTOOL=unix
    CPPFLAGS="$CPPFLAGS -I./external/libcsoup -I./external/iup/include \
	    -I/usr/include/ffmpeg"
    LDFLAGS="$LDFLAGS -L./external/libcsoup"
    AC_CHECK_PROG([PKGCONFIG], [pkg-config], [pkg-config], [])
    if test "x$PKGCONFIG" = x; then
      SYSGUI=CFG_GUI_OFF
      AC_MSG_WARN([pkg-config is not found -- command line interface only])
    else
      SYSGUI=CFG_GUI_ON
      LDFLAGS="$LDFLAGS -L./external/iup/lib"
      AS_CASE([$with_gui],
        [no|No|NO], 
	  [SYSGUI=CFG_GUI_OFF],
        [2|gtk2|Gtk2|GTK2], 
	  [PKG_CHECK_MODULES([GTK], [gtk+-2.0], [
              AC_MSG_RESULT([gtk+-2.0])
              IUPCFG="USE_GTK2=1"], 
            [PKG_CHECK_MODULES([GTK], [gtk+-3.0], 
              [AC_MSG_WARN([Gtk 2.0 not found. Using Gtk 3.0 instead])],
	      [SYSGUI=CFG_GUI_OFF])]
	  )],
	[3|gtk3|Gtk3|GTK3],
          [PKG_CHECK_MODULES([GTK], [gtk+-3.0], , 
            [PKG_CHECK_MODULES([GTK], [gtk+-2.0], [
                AC_MSG_WARN([Gtk 3.0 not found. Using Gtk 2.0 instead])
	        IUPCFG="USE_GTK2=1"],
	      [SYSGUI=CFG_GUI_OFF])]
	  )],
        [PKG_CHECK_MODULES([GTK], [gtk+-3.0], 
	  [AC_MSG_NOTICE([gtk+-3.0 found])],
          [PKG_CHECK_MODULES([GTK], [gtk+-2.0], 
            [AC_MSG_NOTICE([gtk+-2.0 found]) 
	      IUPCFG="USE_GTK2=1"],
	    [SYSGUI=CFG_GUI_OFF])]
	  )])
      AS_IF([! test "$SYSGUI" = CFG_GUI_OFF], [
          CPPFLAGS="$CPPFLAGS $GTK_CFLAGS"
	  LIBS="$LIBS $GTK_LIBS -lX11"
      ])
    fi
    SYSDEFS="-D$SYSGUI" 
    ;;
esac

AM_CONDITIONAL([XAM_MSWIN], [test x$SYSTOOL = xmingw])
AM_CONDITIONAL([XAM_GUI], [test x$SYSGUI = xCFG_GUI_ON])

CFLAGS="$CFLAGS $DEBUGS"

AC_SUBST(SYSTOOL)
AC_SUBST(SYSGUI)
AC_SUBST(IUPCFG)
AC_SUBST(SYSDEFS)


# Checks for libraries.
# Checks for IUP libraries. Rebuild them if they don't exist.
AS_IF([test "$SYSGUI" = CFG_GUI_ON], [
  AC_CHECK_LIB([iup], [IupOpen],, [
    POSTLIB="$POSTLIB -liup"
    PRELIBS="$PRELIBS libiup"
    AC_MSG_NOTICE([The libiup will be built soon.])],
    [$LIBGUI])
  POSTLIB="$LIBGUI $POSTLIB -liupimglib"], 
  [POSTLIB="$LIBCON"]
)

AC_CHECK_LIB([csoup], [smm_init],, [
  POSTLIB="$POSTLIB -lcsoup"
  PRELIBS="$PRELIBS libcsoup"
  AC_MSG_NOTICE([The libcsoup will be built soon.])])

AC_CHECK_LIB([m], [exp], [],
  [AC_MSG_ERROR([libm not found.])])
AC_CHECK_LIB([z], [zlibVersion], [],
  [AC_MSG_ERROR([zlib not found.])])
AC_CHECK_LIB([jpeg], [jpeg_read_header], [],
  [AC_MSG_ERROR([libjpeg not found.])])
AC_CHECK_LIB([png], [png_get_copyright], [],
  [AC_MSG_ERROR([libpng not found.])])
AC_CHECK_LIB([freetype], [FT_Library_Version], [],
  [AC_MSG_ERROR([Freetype not found.])])
AC_CHECK_LIB([gd], [gdImageCreate], [],
  [AC_MSG_ERROR([libgd not found.])])
AC_CHECK_LIB([avutil], [avutil_version], [],
  [AC_MSG_ERROR([libavutil not found. Install FFMPEG dev first.])])
AC_CHECK_LIB([swscale], [swscale_version], [],
  [AC_MSG_ERROR([libswscale not found. Install FFMPEG dev first.])])
AC_CHECK_LIB([avformat], [avformat_version], [],
  [AC_MSG_ERROR([libavformat not found. Install FFMPEG dev first.])])
AC_CHECK_LIB([avcodec], [avcodec_version], [],
  [AC_MSG_ERROR([libavcodec not found. Install FFMPEG dev first.])])

AC_SUBST(POSTLIB)

# Checks for header files.
# AC_INCLUDES_DEFAULT can not output header defines automatically
# You need to add these include files manually in your C codes.
AC_CHECK_HEADERS([sys/time.h],,,[AC_INCLUDES_DEFAULT])
AC_CHECK_HEADER([libavcodec/avcodec.h], 
  [AC_DEFINE(HAVE_AVCODEC_H, 1, 
    [Define 1 if you have the <libavcodec/avcodec.h> header file.])],
  [AC_CHECK_HEADER([ffmpeg/libavcodec/avcodec.h],
    [AC_DEFINE(HAVE_FFMPEG_AVCODEC_H, 1,
      [Define 1 if you have the <ffmpeg/libavcodec/avcodec.h> header file.])],
        [AC_MSG_ERROR([avcodec.h not found])])])
AC_CHECK_HEADER([libavformat/avformat.h], 
  [AC_DEFINE(HAVE_AVFORMAT_H, 1, 
    [Define 1 if you have the <libavformat/avformat.h> header file.])],
  [AC_CHECK_HEADER([ffmpeg/libavformat/avformat.h],
    [AC_DEFINE(HAVE_FFMPEG_AVFORMAT_H, 1,
      [Define 1 if you have the <ffmpeg/libavformat/avformat.h> header file.])],
        [AC_MSG_ERROR([avformat.h not found])])])
AC_CHECK_HEADER([libswscale/swscale.h], 
  [AC_DEFINE(HAVE_SWSCALE_H, 1, 
    [Define 1 if you have the <libswscale/swscale.h> header file.])],
  [AC_CHECK_HEADER([ffmpeg/libswscale/swscale.h],
    [AC_DEFINE(HAVE_FFMPEG_SWSCALE_H, 1,
      [Define 1 if you have the <ffmpeg/libswscale/swscale.h> header file.])],
        [AC_MSG_ERROR([swscale.h not found])])])
AC_CHECK_HEADER([libavutil/avutil.h], 
  [AC_DEFINE(HAVE_AVUTIL_H, 1, 
    [Define 1 if you have the <libavutil/avutil.h> header file.])],
  [AC_CHECK_HEADER([ffmpeg/libavutil/avutil.h],
    [AC_DEFINE(HAVE_FFMPEG_AVUTIL_H, 1,
      [Define 1 if you have the <ffmpeg/libavutil/avutil.h> header file.])],
        [AC_MSG_ERROR([avutil.h not found])])])

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_INT64_T
AC_TYPE_UINT8_T

# Checks for library functions.
AC_FUNC_STRTOD
AC_CHECK_FUNCS([memset strcasecmp strchr strrchr strstr strtol \
    avformat_open_input av_open_input_file avformat_find_stream_info \
    av_find_stream_info avcodec_open2 avcodec_open avformat_close_input \
    av_close_input_file av_find_best_stream av_frame_alloc av_frame_free \
    avcodec_alloc_frame av_dict_get av_metadata_get av_dump_format \
    dump_format])

# Checks for operating system services or capabilities.
AC_PATH_XTRA
AC_SYS_LARGEFILE

# Just for checking the function of AC_DEFINE().
# It can add an object in config.h.in by autoheader and output what I need.
# AC_DEFINE([HAVE_GUI],[1],[GUI is required])

AC_CONFIG_FILES([Makefile])
AC_OUTPUT

